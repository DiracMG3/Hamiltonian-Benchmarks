{
    "sourceFile": "Benchmarks/HamiltonianGenerator.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1670143589640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1670143589640,
            "name": "Commit-0",
            "content": "from qiskit_nature.drivers import UnitsType, Molecule\nfrom qiskit_nature.drivers.second_quantization import (\n    ElectronicStructureDriverType,\n    ElectronicStructureMoleculeDriver,\n)\nfrom qiskit_nature.problems.second_quantization import ElectronicStructureProblem\nfrom qiskit_nature.problems.second_quantization.lattice import FermiHubbardModel\nfrom qiskit_nature.converters.second_quantization import QubitConverter\nfrom qiskit_nature.mappers.second_quantization import JordanWignerMapper, ParityMapper, BravyiKitaevMapper\nfrom qiskit_nature.problems.second_quantization.lattice import (\n    BoundaryCondition,\n    FermiHubbardModel,\n    HyperCubicLattice,\n    Lattice,\n    LatticeDrawStyle,\n    LineLattice,\n    SquareLattice,\n    TriangularLattice,\n)\nimport os\nimport pickle\nimport re\nimport numpy as np\nimport random\nfrom benchmark.mypauli import pauliString\n\n\n\ngateRegex = re.compile(r'[IXYZ]')\npauliRegex = re.compile(r'[XYZ]\\d+')\nqubitRegex = re.compile(r'\\d+')\npackage_directory = os.path.dirname(os.path.abspath(__file__))\n\n# define the geometry of molecules\nH2 = [['H', [0., 0, 0]],['H', [0, 0, -1.5]]]\nHe2 = [['He', [0., 0, 0]],['He', [0, 0, 2.6740000]]]\nHF = [['F', [0., 0, 0]],['H', [0, 0, 0.9153800]]]\nHCl = [['Cl', [0., 0., 0.]],['H', [0, 0, 1.2744500]]]\nClF = [['F', [0., 0., 0.]],['Cl', [0., 0., 1.6303300]]]\nLiH = [['H', [0.,0.,0.]],['Li', [0.,0.,1.15]]]\nN2 = [['N', [0., 0, 0]],['N', [0, 0, -1.5]]]\nNH2 = [['N', [0.,0.,0.]],['H', [0.,0.,1.0240500]],['H', [0.9971600,0.,-0.2331400]]]  # NH2 charge = 0, multiplicity=2\nNH3 = [['N', [0.,0.,0.1128900]],['H', [0., 0.9380200,-0.2634100]],\n    ['H', [0.8123500,-0.4690100,-0.2634100]],\n    ['H', [-0.8123500,-0.4690100,-0.2634100]]]\nH2O = [['O', [0.,0.,0.]],['H', [0.95,-0.55,0.]],['H', [-0.95,-0.55,0.]]]\nH2S = [['S', [0., 0, 0]],['H', [0, 0, -1.5]],['H', [0, 0, 1.5]]]\nCH2 = [['C', [0.,0.,0.]],['H', [0.,0.,1.1077100]],['H', [1.0837800,0.,-0.2289900]]]\nCH4 = [['C', [0.,1.0,1.0]],['H', [0.051054399,0.051054399,0.051054399]],\n    ['H', [1.948945601,1.948945601,0.051054399]],\n    ['H', [0.051054399,1.948945601,1.948945601]],\n    ['H', [1.948945601,0.051054399,1.948945601]]]\nMgO = [['Mg', [0., 0, 0]],['O', [0, 0, -1.5]]]\nCO2 = [['O', [1.4, 0., 0.]],['C', [0., 0., 0.]],['O', [-1.4, 0., 0.]]]\nNaCl = [['Na', [0., -1.5, -1.5]],['Cl', [1.5, -1.5, -1.5]]]\nKOH = [['K', [3.4030, 0.2500, 0.0]],['O', [2.5369, -0.2500, -1.5]],['H', [2.0,0.06,0.0]]]\nFeO = [['Fe', [0., 0, 0]],['O', [0, 0, -1.5]]]\n\n# one can load calculated Hamiltonian operators from saved pickle files\ndef load_oplist(name, benchmark='uccsd'):\n    if benchmark == 'molecule':\n        fth = os.path.join(package_directory, 'data', name + '.pickle')\n        with open(fth, 'rb') as f:\n            entry = pickle.load(f)\n        oplist = []\n        paulis = []\n        for i in entry:\n            paulis.extend(i)\n        for i in paulis:\n            oplist.append(i.ps)\n        return oplist\n    if benchmark == 'uccsd':\n        fth = os.path.join(package_directory, 'data', name + '_UCCSD.pickle')\n        with open(fth, 'rb') as f:\n            entry = pickle.load(f)\n        oplist = []\n        paulis = []\n        for i in entry:\n            paulis.extend(i)\n        for i in paulis:\n            oplist.append(i.ps)\n        return oplist\n\n# calculate molecule's Hamiltonian operators utilizing module from qiskit_nature\ndef get_qubit_op(geo, molecule_charge, molecule_multiplicity):\n    molecule = Molecule(geometry=geo, charge=molecule_charge, multiplicity=molecule_multiplicity)\n    driver = ElectronicStructureMoleculeDriver(\n    molecule, basis=\"sto3g\", driver_type=ElectronicStructureDriverType.PYSCF)\n    es_problem = ElectronicStructureProblem(driver)\n    second_q_op = es_problem.second_q_ops()\n    # JordanWigner mapping\n    qubit_converter = QubitConverter(mapper=BravyiKitaevMapper())\n    qubit_op = qubit_converter.convert(second_q_op[0])\n    # Parity mapping\n    '''qubit_converter = QubitConverter(mapper=ParityMapper(), two_qubit_reduction=True)\n    qubit_op = qubit_converter.convert(second_q_op[0], num_particles=es_problem.num_particles)'''\n\n    return qubit_op\n\n# calculated Hamiltonian operators of Fermi-Hubbard model\ndef gene_FermiHubbard_oplist(rows, cols):\n    qubit_converter = QubitConverter(mapper=BravyiKitaevMapper())\n    square_lattice = SquareLattice(rows=rows, cols=cols, boundary_condition=BoundaryCondition.PERIODIC)\n    t = -1.0  # the interaction parameter\n    v = 0.0  # the onsite potential\n    u = 5.0  # the interaction parameter U\n    fhm = FermiHubbardModel.uniform_parameters(\n        lattice=square_lattice,\n        uniform_interaction=t,\n        uniform_onsite_potential=v,\n        onsite_interaction=u,\n    )\n    ham = qubit_converter.convert(fhm.second_q_ops(display_format=\"sparse\"))\n    oplist = []\n    for i in ham.primitive:\n        oplist.append(str(i.paulis[0]))\n    return oplist\n\ndef gene_molecule_oplist(atom_geo, molecule_charge=0, molecule_multiplicity=1):\n    qubit_op = get_qubit_op(atom_geo, molecule_charge, molecule_multiplicity)\n    oplist = []\n    for i in qubit_op.primitive:\n        #oplist.append(str(i.paulis[0]))\n        oplist.append([pauliString(str(i.paulis[0]), coeff=i.coeffs[0])])\n    return oplist\n"
        }
    ]
}